
public class DCT {

    private double[][] TInvers = {{0.3535533905932722, 0.29158920843636194, 0.2746710283669545, 0.24719739471469043, 0.21022410381342488, 0.16517201849766383, 0.11377246514055481, 0.0580006997524353}, {0.35355339059327817, 0.24719739471469293, 0.11377246514055245, -0.058000699752450036, -0.21022410381341994, -0.29158920843637837, -0.27467102836694923, -0.16517201849765206}, {0.35355339059327107, 0.16517201849764884, -0.11377246514055184, -0.29158920843635483, -0.21022410381343626, 0.05800069975244915, 0.2746710283669506, 0.24719739471468127}, {0.35355339059327173, 0.058000699752446316, -0.27467102836695867, -0.16517201849766028, 0.2102241038134307, 0.2471973947146805, -0.11377246514055628, -0.29158920843636404}, {0.3535533905932753, -0.05800069975244204, -0.2746710283669459, 0.16517201849765484, 0.21022410381343093, -0.24719739471468555, -0.11377246514055583, 0.2915892084363645}, {0.3535533905932806, -0.16517201849766372, -0.11377246514055939, 0.29158920843636715, -0.2102241038134306, -0.05800069975243671, 0.274671028366951, -0.24719739471468427}, {0.35355339059326085, -0.2471973947146724, 0.11377246514055384, 0.058000699752439044, -0.21022410381342888, 0.2915892084363656, -0.27467102836695295, 0.16517201849765786}, {0.3535533905932803, -0.29158920843637187, 0.274671028366955, -0.24719739471468632, 0.21022410381342915, -0.16517201849765845, 0.11377246514055786, -0.058000699752438545}};
    private double[][] T1Invers = {{0.3535533905932732, 0.3535533905932753, 0.3535533905932691, 0.3535533905932817, 0.3535533905932776, 0.3535533905932769, 0.35355339059328195, 0.3535533905932757}, {0.29158920843636527, 0.24719739471468333, 0.16517201849766255, 0.058000699752431606, -0.058000699752440155, -0.16517201849765928, -0.24719739471469082, -0.2915892084363666}, {0.27467102836695334, 0.11377246514056127, -0.1137724651405636, -0.2746710283669471, -0.27467102836695223, -0.11377246514055694, 0.1137724651405605, 0.2746710283669529}, {0.2471973947146835, -0.05800069975244582, -0.29158920843635716, -0.16517201849766194, 0.1651720184976586, 0.29158920843636627, 0.05800069975243449, -0.24719739471468394}, {0.21022410381343148, -0.21022410381341938, -0.21022410381343548, 0.21022410381343204, 0.2102241038134267, -0.21022410381342976, -0.2102241038134247, 0.21022410381342638}, {0.16517201849765262, -0.29158920843637137, 0.0580006997524416, 0.24719739471468233, -0.24719739471468222, -0.0580006997524376, 0.2915892084363614, -0.16517201849765542}, {0.1137724651405636, -0.27467102836695045, 0.27467102836695156, -0.11377246514055483, -0.11377246514055994, 0.2746710283669529, -0.2746710283669496, 0.11377246514055497}, {0.05800069975243307, -0.165172018497658, 0.24719739471468496, -0.2915892084363658, 0.2915892084363671, -0.24719739471468574, 0.16517201849765606, -0.058000699752436775}};

    private double[][] T = {{0.35355339059327373, 0.35355339059327373, 0.35355339059327373, 0.35355339059327373, 0.35355339059327373, 0.35355339059327373, 0.35355339059327373, 0.35355339059327373}, {0.8247388264246857, 0.6991798163776061, 0.46717701736785444, 0.16405075243405512, -0.164050752434055, -0.4671770173678541, -0.6991798163776062, -0.8247388264246857}, {0.7768869870150186, 0.32179712645279135, -0.32179712645279124, -0.7768869870150186, -0.7768869870150187, -0.3217971264527918, 0.3217971264527915, 0.7768869870150185}, {0.6991798163776061, -0.164050752434055, -0.8247388264246857, -0.46717701736785433, 0.46717701736785405, 0.8247388264246857, 0.1640507524340555, -0.699179816377606}, {0.5946035575013605, -0.5946035575013604, -0.5946035575013606, 0.5946035575013604, 0.5946035575013606, -0.5946035575013598, -0.5946035575013602, 0.5946035575013597}, {0.46717701736785444, -0.8247388264246857, 0.16405075243405512, 0.6991798163776063, -0.699179816377606, -0.16405075243405487, 0.8247388264246859, -0.4671770173678538}, {0.32179712645279135, -0.7768869870150187, 0.7768869870150185, -0.3217971264527914, -0.32179712645279196, 0.7768869870150186, -0.7768869870150183, 0.3217971264527911}, {0.16405075243405512, -0.46717701736785433, 0.6991798163776063, -0.8247388264246859, 0.8247388264246857, -0.6991798163776058, 0.4671770173678538, -0.16405075243405534}};
    private double[][] T1 = {{0.35355339059327373, 0.8247388264246857, 0.7768869870150186, 0.6991798163776061, 0.5946035575013605, 0.46717701736785444, 0.32179712645279135, 0.16405075243405512}, {0.35355339059327373, 0.6991798163776061, 0.32179712645279135, -0.164050752434055, -0.5946035575013604, -0.8247388264246857, -0.7768869870150187, -0.46717701736785433}, {0.35355339059327373, 0.46717701736785444, -0.32179712645279124, -0.8247388264246857, -0.5946035575013606, 0.16405075243405512, 0.7768869870150185, 0.6991798163776063}, {0.35355339059327373, 0.16405075243405512, -0.7768869870150186, -0.46717701736785433, 0.5946035575013604, 0.6991798163776063, -0.3217971264527914, -0.8247388264246859}, {0.35355339059327373, -0.164050752434055, -0.7768869870150187, 0.46717701736785405, 0.5946035575013606, -0.699179816377606, -0.32179712645279196, 0.8247388264246857}, {0.35355339059327373, -0.4671770173678541, -0.3217971264527918, 0.8247388264246857, -0.5946035575013598, -0.16405075243405487, 0.7768869870150186, -0.6991798163776058}, {0.35355339059327373, -0.6991798163776062, 0.3217971264527915, 0.1640507524340555, -0.5946035575013602, 0.8247388264246859, -0.7768869870150183, 0.4671770173678538}, {0.35355339059327373, -0.8247388264246857, 0.7768869870150185, -0.699179816377606, 0.5946035575013597, -0.4671770173678538, 0.3217971264527911, -0.16405075243405534}};


    int[][][][] get8x8(int[][] matrix, int shift) {
        int[][][][] result = new int[matrix.length / 8][matrix[0].length / 8][8][8];
        for (int i = 0; i < matrix.length / 8; i++) {
            for (int j = 0; j < matrix[0].length / 8; j++) {
                for (int k = 0; k < 8; k++) {
                    for (int l = 0; l < 8; l++) {
                        result[i][j][k][l] = (matrix[i * 8 + k][j * 8 + l] >> shift) & 255;
                    }
                }
            }
        }
        return result;
    }


    private int[][] multiply(double[][] a, int[][] b, double[][] c) {
        int[][] result = new int[a.length][b[0].length];
        double[][] tmpMatr = new double[a.length][b[0].length];



        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < b[0].length; j++) {
                for (int k = 0; k < b.length; k++) {

                    tmpMatr[i][j] += a[i][k] * b[k][j];
                }
            }
        }
        for (int i = 0; i < tmpMatr.length; i++) {
            for (int j = 0; j < c[0].length; j++) {
                double tmp = 0;
                for (int k = 0; k < c.length; k++) {
                    tmp += tmpMatr[i][k] * c[k][j];
                }
                result[i][j] = (int) tmp;
            }
        }


        return result;
    }


    private int[][] getQuantization(int[][] matr, int len) {
        int[][] ret = new int[matr.length][matr[0].length];
        int[][] Q = getMatrixQantization(len);

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {

                ret[i][j] = (matr[i][j] / Q[i][j]);
            }
        }
        return ret;
    }

    private int[][] getBackQuantization(int[][] matr, int len) {
        int[][] ret = new int[matr.length][matr[0].length];
        int[][] Q = getMatrixQantization(len);
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {

//                if (matr[i][j] < 1) {
//                    ret[i][j] = Q[i][j];
//                } else
                {
                    ret[i][j] = matr[i][j] * Q[i][j];
                }
            }
        }
        return ret;
    }


    private int[][] getDCT(int[][] a, boolean quantization, int len) {
        if (quantization) {
            int[][] dCT = multiply(T, a, T1);
           // check(dCT);
            return getQuantization(dCT, len);
        } else {
            return multiply(T, a, T1);
        }
    }
//void check(int[][] dCT){
//    for (int i = 0; i < 8; i++) {
//        for (int j = 0; j < 8; j++) {
//            if(dCT[i][j]>1023){
//                System.out.println(dCT[i][j]);
//                dCT[i][j]&=1023;
//            }
//            if(dCT[i][j]<-1024){
//
//                System.out.println(dCT[i][j]);
//                dCT[i][j]=-1024;
//            }
//        }
//    }
//}
    private int[][] getBackDCT(int[][] a, boolean quantization, int len) {
        int[][] aa = new int[a.length][a[0].length];
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[0].length; j++) {
                aa[i][j] = a[i][j];
            }
        }

        if (quantization) {

            //return multiply(inversion( getQuantization(T,len)), aa, inversion(getQuantization(T1,len)));


            aa = getBackQuantization(aa, len);
            int[][] rezult = multiply(inversion(T), aa, inversion(T1));

            return rezult;
            // return multiply(TInvers, aa, T1Invers);

        } else {

            return multiply(TInvers, aa, T1Invers);
        }
    }


    int[][] getMatrixQantization(int q) {
        int[][] q_matrix = {
                {16, 11, 10, 16, 24, 40, 51, 61},
                {12, 12, 14, 19, 26, 58, 60, 55},
                {14, 13, 16, 24, 40, 57, 69, 56},
                {14, 17, 22, 29, 51, 87, 80, 62},
                {18, 22, 37, 56, 68, 109, 103, 77},
                {24, 35, 55, 64, 81, 104, 113, 92},
                {49, 64, 78, 87, 103, 121, 120, 101},
                {72, 92, 95, 98, 112, 100, 103, 99}
        };
        double scale = 1;
        if (q == 0) {
            q = 1;
        }
        if (q < 50) {


            scale = 5000.0 / q;
        } else {
            scale = (200.0 - 2.0 * q);
        }


        int[][] result = new int[8][8];
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                result[i][j] = (int) ((q_matrix[i][j] * scale) + 50) / 100;

            }
        }
        return result;
    }


    int[][][][] getDCTPhoto(int[][] img, boolean quantization, int len) {
        int[][][][] matrix = get8x8(img, 0);


        int[][][][] result = new int[matrix.length][matrix[0].length][8][8];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                result[i][j] = (getDCT(matrix[i][j], quantization, len));

            }
        }

        return result;
    }

    int[][] getPhoto(int[][][][] dctPhoto, boolean quantization, int len) {
        int[][][][] result8x8 = new int[dctPhoto.length][dctPhoto[0].length][8][8];


        for (int i = 0; i < dctPhoto.length; i++) {
            for (int j = 0; j < dctPhoto[0].length; j++) {
                result8x8[i][j] = getBackDCT(dctPhoto[i][j], quantization, len);
            }
        }


        int[][] result = new int[result8x8.length * 8][result8x8[0].length * 8];
        for (int i = 0; i < result8x8.length; i++) {
            for (int j = 0; j < result8x8[0].length; j++) {
                for (int k = 0; k < 8; k++) {
                    for (int l = 0; l < 8; l++) {

                        result[i * 8 + k][j * 8 + l] = result8x8[i][j][k][l] & 255;

                    }
                }

            }
        }


        return result;

    }

    private double[][] inversion(double[][] A1) {
        double[][] A=new double[8][8];
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j <8 ; j++) {
                A[i][j]=A1[i][j];
            }
        }
        int N = 8;
        double temp;

        double[][] E = new double[N][N];


        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++) {
                E[i][j] = 0.0;

                if (i == j){
                    E[i][j] = 1.0;}
            }

        for (int k = 0; k < N; k++) {
            temp = A[k][k];

            for (int j = 0; j < N; j++) {
                A[k][j] /= temp;
                E[k][j] /= temp;
            }

            for (int i = k + 1; i < N; i++) {
                temp = A[i][k];

                for (int j = 0; j < N; j++) {
                    A[i][j] -= A[k][j] * temp;
                    E[i][j] -= E[k][j] * temp;
                }
            }
        }

        for (int k = N - 1; k > 0; k--) {
            for (int i = k - 1; i >= 0; i--) {
                temp = A[i][k];

                for (int j = 0; j < N; j++) {
                    A[i][j] -= A[k][j] * temp;
                    E[i][j] -= E[k][j] * temp;
                }
            }
        }

        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                A[i][j] = E[i][j];

        return A;
    }


    static void sayArray(double[][] a){
        for (int i = 0; i < a.length; i++) {
            for (int i1 = 0; i1 < a[0].length; i1++) {
                System.out.print(a[i][i1]+" ");
            }
            System.out.println();
        }
    }

    static void sayArray(int[][] a){
        for (int i = 0; i < a.length; i++) {
            for (int i1 = 0; i1 < a[0].length; i1++) {
                System.out.print(a[i][i1]+" ");
            }
            System.out.println();
        }
    }
}
